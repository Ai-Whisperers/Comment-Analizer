version: '3.8'

# SECURE DOCKER COMPOSE CONFIGURATION
# Based on security audit recommendations

services:
  comment-analyzer:
    # Use the secure Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.secure
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse HEAD)}
    
    image: comment-analyzer:secure-latest
    container_name: comment-analyzer-secure
    
    # Security: Run as non-root user
    user: "1000:1000"
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security: Network configuration (internal only)
    ports:
      - "127.0.0.1:8501:8501"  # Bind only to localhost
    
    # Security: Environment variables (non-sensitive only)
    environment:
      - APP_ENV=production
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_ADDRESS=127.0.0.1
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
      - MAX_FILE_SIZE_MB=50
      - SESSION_TIMEOUT_MINUTES=30
      - API_RATE_LIMIT_PER_MINUTE=60
      - LOG_LEVEL=WARNING
      - ENABLE_DEBUG=false
      - TZ=America/Asuncion
    
    # Security: Volumes with read-only where possible
    volumes:
      # Application code (read-only)
      - ./src:/app/src:ro
      - ./requirements.txt:/app/requirements.txt:ro
      
      # Data directories (read-write required)
      - data_volume:/app/data:rw
      - outputs_volume:/app/outputs:rw
      - logs_volume:/app/logs:rw
      - client_input_volume:/app/client_input:rw
      
      # Secrets (read-only, encrypted at rest)
      - ./secrets:/run/secrets:ro
      
      # Temporary directories (tmpfs for security)
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
      - type: tmpfs
        target: /run
        tmpfs:
          size: 10M
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Temporary filesystems for writable areas
    tmpfs:
      - /tmp:noexec,nosuid,size=100M
      - /run:noexec,nosuid,size=10M
    
    # Security: Capabilities (drop all, add only required)
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    
    # Security: Security options
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:unconfined
    
    # Security: Disable inter-process communication
    ipc: none
    
    # Security: PID namespace isolation
    pid: host
    
    # Security: Network isolation
    networks:
      - secure_network
    
    # Security: Restart policy
    restart: unless-stopped
    
    # Security: Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=comment-analyzer,environment=production"
    
    # Security: Dependencies
    depends_on:
      - redis
    
    # Security: Labels for monitoring
    labels:
      - "traefik.enable=false"  # Disable external access
      - "com.docker.security=high"
      - "com.docker.compliance=iso27001"
      - "com.docker.monitoring=enabled"

  # Redis for secure session storage and rate limiting
  redis:
    image: redis:7-alpine
    container_name: comment-analyzer-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-StrongP@ssw0rd2024!}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Security: Volumes
    volumes:
      - redis_data:/data:rw
      - type: tmpfs
        target: /tmp
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: User
    user: "999:999"
    
    # Security: Capabilities
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    
    # Security: Security options
    security_opt:
      - no-new-privileges:true
    
    # Security: Network
    networks:
      - secure_network
    
    # Security: No external ports (internal only)
    expose:
      - "6379"
    
    # Security: Restart policy
    restart: unless-stopped
    
    # Security: Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Optional: Security scanner sidecar
  security-scanner:
    image: aquasec/trivy:latest
    container_name: comment-analyzer-scanner
    command: >
      image
      --exit-code 0
      --severity HIGH,CRITICAL
      --no-progress
      comment-analyzer:secure-latest
    
    # Security: Volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache:rw
    
    # Security: Network
    networks:
      - secure_network
    
    # Run once at startup
    restart: "no"
    
    # Security: User
    user: "0:0"  # Trivy needs root for Docker socket
    
    # Security: Capabilities
    cap_drop:
      - ALL
    cap_add:
      - DAC_READ_SEARCH
    
    depends_on:
      - comment-analyzer

# Networks
networks:
  secure_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24
    driver_opts:
      com.docker.network.bridge.name: br_secure
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Volumes with encryption at rest (requires Docker EE or encrypted host filesystem)
volumes:
  data_volume:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind
  outputs_volume:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/outputs
      o: bind
  logs_volume:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind
  client_input_volume:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/client_input
      o: bind
  redis_data:
    driver: local
  trivy_cache:
    driver: local

# Secrets (Docker Swarm mode or external secret management)
secrets:
  openai_api_key:
    external: true
  redis_password:
    external: true
  app_secret_key:
    external: true